import{_ as a,c as i,o as e,a2 as n}from"./chunks/framework.v2dllGfT.js";const c=JSON.parse('{"title":"安装 site 模块","description":"","frontmatter":{},"headers":[],"relativePath":"zh/docs/installation/site/install-site.md","filePath":"zh/docs/installation/site/install-site.md"}'),l={name:"zh/docs/installation/site/install-site.md"};function p(t,s,h,r,d,k){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="安装-site-模块" tabindex="-1">安装 site 模块 <a class="header-anchor" href="#安装-site-模块" aria-label="Permalink to “安装 site 模块”">​</a></h1><h2 id="_1-site-模块简介" tabindex="-1">1. site 模块简介 <a class="header-anchor" href="#_1-site-模块简介" aria-label="Permalink to “1. site 模块简介”">​</a></h2><h3 id="功能和作用" tabindex="-1">功能和作用 <a class="header-anchor" href="#功能和作用" aria-label="Permalink to “功能和作用”">​</a></h3><p>site 模块是 bbs-go 项目的前台网站部分，负责为用户提供内容展示和交互界面。它是用户直接访问的 Web 应用，包含以下主要功能：</p><ul><li>用户注册、登录和个人中心</li><li>话题（帖子）的浏览、发布和互动</li><li>文章的展示和阅读</li><li>用户之间的关注和互动</li><li>站内搜索和内容发现</li></ul><h3 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to “技术栈”">​</a></h3><p>site 模块基于现代前端技术栈构建：</p><ul><li><strong>Nuxt.js</strong>：Vue.js 的服务端渲染框架，提供了优秀的 SEO 和性能</li><li><strong>Vue.js</strong>：渐进式 JavaScript 框架，用于构建用户界面</li><li><strong>TypeScript</strong>：JavaScript 的超集，添加了类型系统</li><li><strong>Tailwind CSS</strong>：实用优先的 CSS 框架，用于快速构建自定义设计</li><li><strong>Pinia</strong>：Vue.js 的状态管理库</li></ul><h3 id="系统要求" tabindex="-1">系统要求 <a class="header-anchor" href="#系统要求" aria-label="Permalink to “系统要求”">​</a></h3><p>在安装 site 模块前，请确保您的系统满足以下要求：</p><ul><li><strong>Node.js</strong>: 20.x 或更高版本（最低要求 18.x LTS）</li><li><strong>内存</strong>: 至少 2GB RAM（推荐 4GB 或更多）</li><li><strong>磁盘空间</strong>: 至少 1GB 可用空间</li><li><strong>操作系统</strong>: Windows、macOS 或 Linux</li></ul><h2 id="_2-准备工作" tabindex="-1">2. 准备工作 <a class="header-anchor" href="#_2-准备工作" aria-label="Permalink to “2. 准备工作”">​</a></h2><h3 id="确认-node-js-环境" tabindex="-1">确认 Node.js 环境 <a class="header-anchor" href="#确认-node-js-环境" aria-label="Permalink to “确认 Node.js 环境”">​</a></h3><p>在开始之前，请确保您已正确安装 Node.js 20+：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查 Node.js 版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>如果您尚未安装 Node.js 或版本不符合要求，请参考 <a href="./install-node.html">Node.js 环境安装</a> 进行安装。</p><h3 id="确认-server-模块状态" tabindex="-1">确认 server 模块状态 <a class="header-anchor" href="#确认-server-模块状态" aria-label="Permalink to “确认 server 模块状态”">​</a></h3><p>site 模块需要与 server 模块通信，因此在安装 site 之前，请确保 server 模块已安装并正常运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查 server 是否运行（示例，使用 curl 或浏览器访问 server 接口）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8082</span></span></code></pre></div><p>如果 server 模块未安装或未运行，请参考 <a href="./../server/install.html">Server 模块安装</a> 进行安装。</p><h3 id="获取源代码" tabindex="-1">获取源代码 <a class="header-anchor" href="#获取源代码" aria-label="Permalink to “获取源代码”">​</a></h3><p>如果您尚未获取 bbs-go 的源代码，可以使用 Git 克隆：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从 GitHub 克隆</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mlogclub/bbs-go.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或从 Gitee 克隆（国内用户推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gitee.com/mlogclub/bbs-go.git</span></span></code></pre></div><p>克隆完成后，进入项目的 site 目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bbs-go/site</span></span></code></pre></div><h2 id="_3-安装依赖" tabindex="-1">3. 安装依赖 <a class="header-anchor" href="#_3-安装依赖" aria-label="Permalink to “3. 安装依赖”">​</a></h2><h3 id="安装-pnpm" tabindex="-1">安装 pnpm <a class="header-anchor" href="#安装-pnpm" aria-label="Permalink to “安装 pnpm”">​</a></h3><p>site 模块使用 pnpm 管理依赖，如果您尚未安装 pnpm，请先执行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><p>您可以通过以下命令验证 pnpm 是否安装成功：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><h3 id="安装项目依赖" tabindex="-1">安装项目依赖 <a class="header-anchor" href="#安装项目依赖" aria-label="Permalink to “安装项目依赖”">​</a></h3><p>进入 site 目录后，执行以下命令安装所有依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>依赖安装可能需要几分钟时间，请耐心等待直到提示成功。</p><h3 id="常见依赖安装问题" tabindex="-1">常见依赖安装问题 <a class="header-anchor" href="#常见依赖安装问题" aria-label="Permalink to “常见依赖安装问题”">​</a></h3><h4 id="网络问题导致安装失败" tabindex="-1">网络问题导致安装失败 <a class="header-anchor" href="#网络问题导致安装失败" aria-label="Permalink to “网络问题导致安装失败”">​</a></h4><p><strong>问题</strong>: 依赖下载缓慢或失败</p><p><strong>解决方案</strong>: 配置国内镜像源</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置淘宝镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmmirror.com</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后重新安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h4 id="依赖冲突" tabindex="-1">依赖冲突 <a class="header-anchor" href="#依赖冲突" aria-label="Permalink to “依赖冲突”">​</a></h4><p><strong>问题</strong>: 显示依赖冲突或版本不兼容错误</p><p><strong>解决方案</strong>: 清理缓存并重新安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div><h4 id="内存不足" tabindex="-1">内存不足 <a class="header-anchor" href="#内存不足" aria-label="Permalink to “内存不足”">​</a></h4><p><strong>问题</strong>: 在低内存环境下安装大量依赖可能导致内存不足错误</p><p><strong>解决方案</strong>: 增加 Node.js 可用内存</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 Linux/macOS 上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_OPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--max_old_space_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">4096</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 Windows 上</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODE_OPTIONS=--max_old_space_size=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4096</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="_4-配置-site-模块" tabindex="-1">4. 配置 site 模块 <a class="header-anchor" href="#_4-配置-site-模块" aria-label="Permalink to “4. 配置 site 模块”">​</a></h2><h3 id="环境配置文件" tabindex="-1">环境配置文件 <a class="header-anchor" href="#环境配置文件" aria-label="Permalink to “环境配置文件”">​</a></h3><p>site 模块使用 <code>.env</code> 文件进行配置。源代码中提供了一个示例配置文件 <code>.env.example</code>，您需要根据实际环境创建对应的配置文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制示例配置文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生产环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.production</span></span></code></pre></div><h3 id="配置参数详解" tabindex="-1">配置参数详解 <a class="header-anchor" href="#配置参数详解" aria-label="Permalink to “配置参数详解”">​</a></h3><p>目前配置文件主要包含以下参数：</p><h4 id="server-url" tabindex="-1">SERVER_URL <a class="header-anchor" href="#server-url" aria-label="Permalink to “SERVER_URL”">​</a></h4><p><code>SERVER_URL</code> 是 site 模块访问 server 模块的 API 地址，这是必须配置的参数：</p><ul><li>开发环境通常设置为：<code>http://localhost:8082</code></li><li>生产环境设置为您的实际 API 地址，例如：<code>https://api.yourdomain.com</code></li></ul><h3 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to “配置示例”">​</a></h3><p>开发环境配置示例 (<code>.env.local</code>)：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SERVER_URL=http://localhost:8082</span></span></code></pre></div><p>生产环境配置示例 (<code>.env.production</code>)：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SERVER_URL=https://api.yourdomain.com</span></span></code></pre></div><h2 id="_5-开发环境运行" tabindex="-1">5. 开发环境运行 <a class="header-anchor" href="#_5-开发环境运行" aria-label="Permalink to “5. 开发环境运行”">​</a></h2><h3 id="启动开发服务器" tabindex="-1">启动开发服务器 <a class="header-anchor" href="#启动开发服务器" aria-label="Permalink to “启动开发服务器”">​</a></h3><p>配置完成后，可以启动开发服务器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>此命令会启动一个带有热重载功能的开发服务器，任何代码修改都会实时反映在浏览器中。</p><h3 id="开发模式参数" tabindex="-1">开发模式参数 <a class="header-anchor" href="#开发模式参数" aria-label="Permalink to “开发模式参数”">​</a></h3><p>您可以通过附加参数来调整开发服务器的行为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定端口（默认为 3000）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3001</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启用详细日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span></span></code></pre></div><h3 id="访问和测试" tabindex="-1">访问和测试 <a class="header-anchor" href="#访问和测试" aria-label="Permalink to “访问和测试”">​</a></h3><p>服务启动成功后，您可以通过浏览器访问：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:3000</span></span></code></pre></div><h3 id="常见开发问题" tabindex="-1">常见开发问题 <a class="header-anchor" href="#常见开发问题" aria-label="Permalink to “常见开发问题”">​</a></h3><h4 id="端口被占用" tabindex="-1">端口被占用 <a class="header-anchor" href="#端口被占用" aria-label="Permalink to “端口被占用”">​</a></h4><p><strong>问题</strong>: 启动时提示端口 3000 已被占用</p><p><strong>解决方案</strong>: 使用其他端口启动</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3001</span></span></code></pre></div><h4 id="无法连接到-server-模块" tabindex="-1">无法连接到 server 模块 <a class="header-anchor" href="#无法连接到-server-模块" aria-label="Permalink to “无法连接到 server 模块”">​</a></h4><p><strong>问题</strong>: 页面加载但无法获取数据，控制台显示 API 请求错误</p><p><strong>解决方案</strong>:</p><ol><li>确认 server 模块是否正在运行</li><li>检查 <code>.env.local</code> 中的 <code>SERVER_URL</code> 配置是否正确</li><li>确认 server 模块的 CORS 设置允许来自开发服务器的请求</li></ol><h2 id="_6-构建和部署" tabindex="-1">6. 构建和部署 <a class="header-anchor" href="#_6-构建和部署" aria-label="Permalink to “6. 构建和部署”">​</a></h2><h3 id="构建生产版本" tabindex="-1">构建生产版本 <a class="header-anchor" href="#构建生产版本" aria-label="Permalink to “构建生产版本”">​</a></h3><p>准备部署到生产环境时，需要构建优化版本：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用生产环境配置构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>构建成功后，产物会生成在 <code>.output</code> 目录中。</p><h3 id="部署方法" tabindex="-1">部署方法 <a class="header-anchor" href="#部署方法" aria-label="Permalink to “部署方法”">​</a></h3><h4 id="使用-node-js-直接运行" tabindex="-1">使用 Node.js 直接运行 <a class="header-anchor" href="#使用-node-js-直接运行" aria-label="Permalink to “使用 Node.js 直接运行”">​</a></h4><p>最简单的方法是使用 Node.js 直接运行构建后的应用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生产模式启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output/server/index.mjs</span></span></code></pre></div><h4 id="使用-pm2-部署-推荐用于生产环境" tabindex="-1">使用 PM2 部署（推荐用于生产环境） <a class="header-anchor" href="#使用-pm2-部署-推荐用于生产环境" aria-label="Permalink to “使用 PM2 部署（推荐用于生产环境）”">​</a></h4><p>PM2 是一个流行的 Node.js 进程管理工具，可以保持应用持续运行：</p><ol><li><p>安装 PM2（如果尚未安装）:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pm2</span></span></code></pre></div></li><li><p>使用 PM2 启动应用:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output/server/index.mjs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bbs-go-site</span></span></code></pre></div></li><li><p>设置开机自启:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> startup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div></li></ol><p>项目中已包含 <code>ecosystem.config.js</code> 文件，您也可以直接使用该配置启动：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ecosystem.config.js</span></span></code></pre></div><h4 id="使用-docker-部署" tabindex="-1">使用 Docker 部署 <a class="header-anchor" href="#使用-docker-部署" aria-label="Permalink to “使用 Docker 部署”">​</a></h4><p>如果您熟悉 Docker，可以使用项目根目录下的 <code>Dockerfile</code> 和 <code>docker-compose.yml</code> 进行部署：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建 Docker 镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bbs-go-site</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3000:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bbsgo-site</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bbs-go-site</span></span></code></pre></div><h4 id="使用-nginx-配置" tabindex="-1">使用 Nginx 配置 <a class="header-anchor" href="#使用-nginx-配置" aria-label="Permalink to “使用 Nginx 配置”">​</a></h4><p>在生产环境中，通常会使用 Nginx 作为反向代理，示例配置如下：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">your-domain.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://localhost:3000;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="多环境部署策略" tabindex="-1">多环境部署策略 <a class="header-anchor" href="#多环境部署策略" aria-label="Permalink to “多环境部署策略”">​</a></h3><p>如果您需要部署多个环境（如测试环境、预发布环境等），可以为每个环境创建对应的 <code>.env.{环境名}</code> 文件，然后在构建时指定环境：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建测试环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建预发布环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">staging</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="部署后的验证" tabindex="-1">部署后的验证 <a class="header-anchor" href="#部署后的验证" aria-label="Permalink to “部署后的验证”">​</a></h3><p>部署完成后，请通过以下步骤验证部署是否成功：</p><ol><li>访问网站首页，确认页面能正常加载</li><li>测试注册/登录功能</li><li>测试发布内容和互动功能</li><li>检查页面加载速度和响应时间</li></ol><h2 id="_7-与其他模块的集成" tabindex="-1">7. 与其他模块的集成 <a class="header-anchor" href="#_7-与其他模块的集成" aria-label="Permalink to “7. 与其他模块的集成”">​</a></h2><h3 id="与-server-模块的集成" tabindex="-1">与 server 模块的集成 <a class="header-anchor" href="#与-server-模块的集成" aria-label="Permalink to “与 server 模块的集成”">​</a></h3><p>site 模块主要通过 HTTP API 与 server 模块通信，确保：</p><ol><li><code>SERVER_URL</code> 配置正确指向 server 模块的地址</li><li>server 模块的 CORS 配置允许来自 site 模块的请求</li><li>如果使用 Nginx 等反向代理，确保正确配置了路由规则</li></ol><h3 id="与-admin-模块的关系" tabindex="-1">与 admin 模块的关系 <a class="header-anchor" href="#与-admin-模块的关系" aria-label="Permalink to “与 admin 模块的关系”">​</a></h3><p>site 和 admin 是两个独立的前端应用，它们共享同一个 server 后端：</p><ul><li>site 模块：面向最终用户的前台界面</li><li>admin 模块：面向管理员的后台管理界面</li></ul><p>两个模块可以部署在同一服务器的不同端口，或者不同的子域名下。</p><h2 id="_8-常见问题与排障" tabindex="-1">8. 常见问题与排障 <a class="header-anchor" href="#_8-常见问题与排障" aria-label="Permalink to “8. 常见问题与排障”">​</a></h2><h3 id="白屏或页面加载失败" tabindex="-1">白屏或页面加载失败 <a class="header-anchor" href="#白屏或页面加载失败" aria-label="Permalink to “白屏或页面加载失败”">​</a></h3><p><strong>问题</strong>: 访问页面时显示白屏或无法加载</p><p><strong>可能原因与解决方案</strong>:</p><ul><li>构建问题：尝试重新执行 <code>pnpm build</code></li><li>服务未正确启动：检查 Node.js 进程是否在运行</li><li>端口冲突：更改端口或停止占用端口的其他应用</li></ul><h3 id="api-请求错误" tabindex="-1">API 请求错误 <a class="header-anchor" href="#api-请求错误" aria-label="Permalink to “API 请求错误”">​</a></h3><p><strong>问题</strong>: 页面加载但无法获取数据</p><p><strong>可能原因与解决方案</strong>:</p><ul><li>SERVER_URL 配置错误：检查环境变量配置</li><li>server 模块未运行：确保 server 模块正常运行</li><li>CORS 问题：检查 server 模块的 CORS 配置</li><li>网络问题：检查网络连接和防火墙设置</li></ul><h3 id="样式加载问题" tabindex="-1">样式加载问题 <a class="header-anchor" href="#样式加载问题" aria-label="Permalink to “样式加载问题”">​</a></h3><p><strong>问题</strong>: 页面结构加载但样式缺失</p><p><strong>可能原因与解决方案</strong>:</p><ul><li>构建不完整：重新执行 <code>pnpm build</code></li><li>静态资源路径问题：检查 Nginx 配置是否正确代理了静态资源</li></ul><h3 id="内存泄漏" tabindex="-1">内存泄漏 <a class="header-anchor" href="#内存泄漏" aria-label="Permalink to “内存泄漏”">​</a></h3><p><strong>问题</strong>: 长时间运行后内存占用逐渐增加</p><p><strong>解决方案</strong>:</p><ul><li>使用 PM2 设置自动重启策略：<code>pm2 start --max-memory-restart 1G</code></li><li>定期重启服务：<code>pm2 restart bbs-go-site --cron &quot;0 3 * * *&quot;</code>（每天凌晨 3 点重启）</li></ul><h2 id="_9-目录结构说明" tabindex="-1">9. 目录结构说明 <a class="header-anchor" href="#_9-目录结构说明" aria-label="Permalink to “9. 目录结构说明”">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>site/</span></span>
<span class="line"><span>├── public/            # 静态资源目录</span></span>
<span class="line"><span>├── src/               # 源代码目录</span></span>
<span class="line"><span>│   ├── assets/        # 资源文件（CSS、图片等）</span></span>
<span class="line"><span>│   ├── components/    # Vue 组件</span></span>
<span class="line"><span>│   ├── layouts/       # 布局组件</span></span>
<span class="line"><span>│   ├── pages/         # 页面组件（自动生成路由）</span></span>
<span class="line"><span>│   ├── composables/   # 可复用的组合式函数</span></span>
<span class="line"><span>│   ├── server/        # 服务端代码</span></span>
<span class="line"><span>│   └── stores/        # 状态管理</span></span>
<span class="line"><span>├── .env.example       # 环境变量示例</span></span>
<span class="line"><span>├── nuxt.config.ts     # Nuxt 配置文件</span></span>
<span class="line"><span>└── package.json       # 项目配置和依赖</span></span></code></pre></div>`,135)]))}const g=a(l,[["render",p]]);export{c as __pageData,g as default};
