import{_ as i,c as a,a3 as o,o as e}from"./chunks/framework.CpP5acwW.js";const l="/images/docs/gomod.png",k=JSON.parse('{"title":"Go mod使用帮助","description":"","frontmatter":{},"headers":[],"relativePath":"docs/getstart/installation/server/go-mod.md","filePath":"docs/getstart/installation/server/go-mod.md"}'),t={name:"docs/getstart/installation/server/go-mod.md"};function d(n,s,p,h,r,g){return e(),a("div",null,s[0]||(s[0]=[o(`<h1 id="go-mod使用帮助" tabindex="-1">Go mod使用帮助 <a class="header-anchor" href="#go-mod使用帮助" aria-label="Permalink to &quot;Go mod使用帮助&quot;">​</a></h1><h2 id="go-mod-介绍" tabindex="-1">Go mod 介绍 <a class="header-anchor" href="#go-mod-介绍" aria-label="Permalink to &quot;Go mod 介绍&quot;">​</a></h2><p>Go Modules 是 Go 语言官方的依赖管理系统，自 Go 1.11 版本起引入，并在 Go 1.13 版本中成为默认的依赖管理工具。其主要目标是解决项目依赖的版本管理问题，让开发者能够轻松地添加、更新和移除依赖。本文将向你介绍如何使用 Go Modules 管理你的 Go 项目。</p><h3 id="go-mod-常用命令" tabindex="-1">Go mod 常用命令 <a class="header-anchor" href="#go-mod-常用命令" aria-label="Permalink to &quot;Go mod 常用命令&quot;">​</a></h3><ul><li>go mod download: 下载依赖的module到本地cache</li><li>go mod edit: 编辑go.mod</li><li>go mod graph: 打印模块依赖图</li><li>go mod init: 在当前目录下初始化go.mod(就是会新建一个go.mod文件)</li><li>go mod tidy: 整理依赖关系，会添加丢失的module，删除不需要的module</li><li>go mod vender: 将依赖复制到vendor下</li><li>go mod verify: 校验依赖</li><li>go mod why: 解释为什么需要依赖</li></ul><h3 id="在新项目中使用" tabindex="-1">在新项目中使用 <a class="header-anchor" href="#在新项目中使用" aria-label="Permalink to &quot;在新项目中使用&quot;">​</a></h3><p>使用go mod并不要求你的项目源码放到$GOPATH下，所以你的新项目可以放到任意你喜欢的路径。在项目根目录下执行<code>go mod init</code>，会生成一个go.mod文件。然后你可以在其中增加你的依赖，如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mlogclub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xxx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/go-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. 你的依赖类似这样，添加到这里，一行一条。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>然后执行<code>go mod download</code>，将依赖下载到本地。这些依赖并不是下载到你的项目目录下，而是会下载到<code>$GOPATH/pkg/mod</code>目录下，这样所有使用go mod的项目都可以共用。</p><h3 id="在旧项目中使用" tabindex="-1">在旧项目中使用 <a class="header-anchor" href="#在旧项目中使用" aria-label="Permalink to &quot;在旧项目中使用&quot;">​</a></h3><p>在旧项目中使用非常简单，只需要一下两个步骤：</p><ul><li><code>go mod init</code>: 在项目根目录下执行该命令，会在项目根目录下生成一个<code>go.mod</code>文件。</li><li><code>go mod tidy</code>: 在项目根目录下执行该命令，go mod会自动分析你当前项目所需要的依赖，并且将他们下载下来。</li></ul><h3 id="如何升级依赖" tabindex="-1">如何升级依赖 <a class="header-anchor" href="#如何升级依赖" aria-label="Permalink to &quot;如何升级依赖&quot;">​</a></h3><p>运行 <code>go get -u</code> 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号y是次要版本号) 运行 <code>go get -u=patch</code> 将会升级到最新的修订版本 运行 <code>go get package@version</code> 将会升级到指定的版本</p><h2 id="go-mod-proxy-配置" tabindex="-1">Go mod proxy 配置 <a class="header-anchor" href="#go-mod-proxy-配置" aria-label="Permalink to &quot;Go mod proxy 配置&quot;">​</a></h2><p>众所周知的原因，国内是无法稳定的访问Google的服务，所以很多依赖无法成功下载，这个时候我们就要为<code>go mod</code>配置代理，目前国内优质的<code>go mod</code>代理推荐一下两个：</p><ul><li><a href="https://goproxy.cn" target="_blank" rel="noreferrer">https://goproxy.cn</a></li><li><a href="https://goproxy.io" target="_blank" rel="noreferrer">https://goproxy.io</a></li></ul><p>这里我推荐使用<code>goproxy.cn</code>，他是国内最早提供goproxy代理的服务，他的服务由七牛提供支持，七牛也是目前国内使用Go语言经验比较丰富的公司，我一直在使用<code>goproxy.cn</code>，很稳定。</p><p>下面我们执行一下命令来设置goproxy：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOPROXY=https://goproxy.cn,direct</span></span></code></pre></div><p>注意：<code>go env -w</code>是不支持老版本go语言sdk的，如果你在执行该命令时报错，可以通过执行以下命令来设置<code>GOPROXY</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://goproxy.cn</span></span></code></pre></div><p>配置完成后，我们执行 <code>go env</code> 命令可以看到效果，如下图：</p><p><img src="`+l+'" alt=""></p>',24)]))}const m=i(t,[["render",d]]);export{k as __pageData,m as default};
